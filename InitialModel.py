# -*- coding: utf-8 -*-
"""InitialModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YRI1WApYJCkNPCOYNLcIn6BNlYQYGOVO
"""

import numpy as np
import matplotlib.pyplot as plt

class InitialModel:
    def __init__(self, true_model, constant_velocity=1500):
        """
        Parameters:
        - true_model: An instance of the true model (e.g., Marmousi1_Velocity or Marmousi2_Velocity).
        - constant_velocity: The constant velocity value to use for the initial model (in m/s).
        """
        self.max_depth_km = true_model.max_depth_km
        self.max_distance_km = true_model.max_distance_km
        self.depth_points = true_model.vp_data.shape[0] if true_model.vp_data is not None else 601
        self.distance_points = true_model.vp_data.shape[1] if true_model.vp_data is not None else 960
        self.constant_velocity = constant_velocity
        self.initial_data = None

    def generate_initial_model(self):
        """
        Generates the initial model with a constant velocity.
        """
        self.initial_data = np.full((self.depth_points, self.distance_points), self.constant_velocity)

    def plot_initial_model(self, fig_size=(6, 3)):
        """
        Plots the generated initial model.
        """
        if self.initial_data is not None:
            initial_km_s = self.initial_data / 1000  # Convert to km/s for visualization

            fig, ax = plt.subplots(figsize=fig_size)
            cax = ax.imshow(initial_km_s, cmap='jet', aspect='auto', origin='upper',
                            extent=[0, self.max_distance_km, self.max_depth_km, 0])
            cbar = fig.colorbar(cax, ax=ax, orientation='vertical', pad=0.02)
            cbar.set_label('Velocity (km/s)', fontsize=10)
            cbar.formatter.set_scientific(False)
            cbar.update_ticks()

            ax.set_title('Initial Model', fontsize=14, loc='center', pad=10)
            ax.set_xlabel('Distance (Km)', fontsize=12, labelpad=10)
            ax.set_ylabel('Depth (Km)', fontsize=12, labelpad=10)
            plt.tight_layout()
            plt.subplots_adjust(left=0.08, right=0.92, top=0.95, bottom=0.1)
            plt.show()
        else:
            raise ValueError("Initial model data is not available. Please run generate_initial_model first.")

